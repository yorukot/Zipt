{
  "name": "Zipt URL Shortener",
  "description": "A modern URL shortener with analytics, custom domains, and workspace management",
  "version": "1.0.0",
  "repository": "https://github.com/yourusername/zipt",
  "documentation": "https://github.com/yourusername/zipt/blob/main/README.md",
  "logo": "https://raw.githubusercontent.com/yourusername/zipt/main/website/public/logo.png",
  "tags": ["url-shortener", "analytics", "nextjs", "golang", "postgresql"],
  "category": "productivity",
  "license": "MIT",
  "author": "Your Name",
  "services": {
    "database": {
      "type": "postgresql",
      "version": "17",
      "description": "TimescaleDB database for storing URLs, analytics, and user data with time-series capabilities",
      "healthcheck": {
        "test": ["CMD-SHELL", "pg_isready -U postgres"],
        "interval": "30s",
        "timeout": "10s",
        "retries": 3
      },
      "ports": {
        "5432": {
          "description": "PostgreSQL port",
          "public": true,
          "protocol": "tcp"
        }
      },
      "volumes": {
        "postgres_data": "/var/lib/postgresql/data"
      },
      "environment": {
        "POSTGRES_DB": {
          "type": "string",
          "default": "zipt",
          "description": "Database name"
        },
        "POSTGRES_USER": {
          "type": "string",
          "default": "postgres",
          "description": "Database user"
        },
        "POSTGRES_PASSWORD": {
          "type": "password",
          "auto_generate": true,
          "description": "Database password (auto-generated by Coolify)"
        }
      }
    },

    "backend": {
      "type": "application",
      "build": {
        "context": ".",
        "dockerfile": "docker/Dockerfile.backend"
      },
      "description": "Go/Gin API server for URL shortening and analytics",
      "healthcheck": {
        "test": ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080/health"],
        "interval": "30s",
        "timeout": "10s",
        "retries": 3
      },
      "ports": {
        "8080": {
          "description": "Backend API port",
          "public": false,
          "protocol": "http"
        }
      },
      "depends_on": ["database"],
      "environment": {
        "GIN_MODE": {
          "type": "string",
          "default": "release",
          "description": "Gin framework mode (debug/release)"
        },
        "PORT": {
          "type": "number",
          "default": 8080,
          "description": "Server port"
        },
        "VERSION": {
          "type": "number",
          "default": 1,
          "description": "Application version"
        },
        "MACHINE_ID": {
          "type": "number",
          "default": 1,
          "description": "Machine ID for distributed systems"
        },
        "BACKEND_URL": {
          "type": "url",
          "required": true,
          "description": "Backend URL (e.g., https://your-domain.com/)"
        },
        "FRONTEND_URL": {
          "type": "url",
          "required": true,
          "description": "Frontend URL (e.g., https://your-domain.com/)"
        },
        "SHORT_DOMAIN": {
          "type": "url",
          "required": true,
          "description": "Short domain for redirects (e.g., https://your-domain.com)"
        },
        "LINKS_DOMAIN": {
          "type": "string",
          "required": true,
          "description": "Links domain without protocol (e.g., your-domain.com)"
        },
        "DATABASE_HOST": {
          "type": "string",
          "default": "database",
          "description": "Database host (use 'database' for internal networking)"
        },
        "DATABASE_USER": {
          "type": "string",
          "default": "postgres",
          "description": "Database user"
        },
        "DATABASE_PASSWORD": {
          "type": "password",
          "auto_generate": true,
          "description": "Database password (auto-generated, matches database service)"
        },
        "DATABASE_DBNAME": {
          "type": "string",
          "default": "zipt",
          "description": "Database name"
        },
        "DATABASE_PORT": {
          "type": "number",
          "default": 5432,
          "description": "Database port"
        },
        "DATABASE_SSLMODE": {
          "type": "string",
          "default": "disable",
          "description": "Database SSL mode"
        },
        "DATABASE_MAX_IDLE_CONNS": {
          "type": "number",
          "default": 10,
          "description": "Maximum idle database connections"
        },
        "DATABASE_MAX_OPEN_CONNS": {
          "type": "number",
          "default": 100,
          "description": "Maximum open database connections"
        },
        "DATABASE_CONN_MAX_LIFETIME": {
          "type": "number",
          "default": 30,
          "description": "Database connection max lifetime (minutes)"
        },
        "ARGON2_MEMORY": {
          "type": "number",
          "default": 65536,
          "description": "Argon2 memory parameter"
        },
        "ARGON2_ITERATIONS": {
          "type": "number",
          "default": 20,
          "description": "Argon2 iterations parameter"
        },
        "ARGON2_PARALLELISM": {
          "type": "number",
          "default": 4,
          "description": "Argon2 parallelism parameter"
        },
        "JWT_SECRET_KEY": {
          "type": "password",
          "auto_generate": true,
          "description": "JWT secret key (auto-generated by Coolify)"
        },
        "COOKIE_DOMAIN": {
          "type": "string",
          "required": true,
          "description": "Cookie domain (e.g., your-domain.com)"
        },
        "COOKIE_PATH": {
          "type": "string",
          "default": "/",
          "description": "Cookie path"
        },
        "COOKIE_REFRESH_TOKEN_EXPIRES": {
          "type": "number",
          "default": 60,
          "description": "Refresh token expiration (minutes)"
        },
        "COOKIE_ACCESS_TOKEN_EXPIRES": {
          "type": "number",
          "default": 15,
          "description": "Access token expiration (minutes)"
        }
      }
    },
    "frontend": {
      "type": "application",
      "build": {
        "context": ".",
        "dockerfile": "docker/Dockerfile.website",
        "args": {
          "SERVER_API_ENDPOINT": "${SERVER_API_ENDPOINT}",
          "NEXT_PUBLIC_SERVER_API_ENDPOINT": "${NEXT_PUBLIC_SERVER_API_ENDPOINT}",
          "NEXT_PUBLIC_LINKS_DOMAIN": "${NEXT_PUBLIC_LINKS_DOMAIN}"
        }
      },
      "description": "Next.js frontend with analytics dashboard",
      "healthcheck": {
        "test": ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:3000/"],
        "interval": "30s",
        "timeout": "10s",
        "retries": 3
      },
      "ports": {
        "3000": {
          "description": "Frontend port",
          "public": false,
          "protocol": "http"
        }
      },
      "depends_on": ["backend"],
      "environment": {
        "SERVER_API_ENDPOINT": {
          "type": "url",
          "required": true,
          "description": "Server API endpoint for frontend (e.g., https://your-domain.com/api/v1)"
        },
        "NEXT_PUBLIC_SERVER_API_ENDPOINT": {
          "type": "url",
          "required": true,
          "description": "Public API endpoint for frontend (e.g., https://your-domain.com/api/v1)"
        },
        "NEXT_PUBLIC_LINKS_DOMAIN": {
          "type": "string",
          "required": true,
          "description": "Public links domain for frontend (e.g., your-domain.com)"
        }
      }
    },
    "proxy": {
      "type": "application",
      "build": {
        "context": "./docker/caddy",
        "dockerfile": "Dockerfile"
      },
      "description": "Caddy reverse proxy with automatic HTTPS",
      "ports": {
        "80": {
          "description": "HTTP port",
          "public": true,
          "protocol": "http"
        },
        "443": {
          "description": "HTTPS port",
          "public": true,
          "protocol": "https"
        }
      },
      "volumes": {
        "caddy_data": "/data",
        "caddy_config": "/config"
      },
      "depends_on": ["frontend", "backend"],
      "environment": {
        "DOMAIN": {
          "type": "string",
          "required": true,
          "description": "Main domain for the application (e.g., your-domain.com)"
        },
        "ACME_EMAIL": {
          "type": "email",
          "required": true,
          "description": "Email for Let's Encrypt SSL certificates"
        }
      }
    }
  },
  "volumes": {
    "postgres_data": {
      "description": "PostgreSQL data storage"
    },

    "caddy_data": {
      "description": "Caddy data storage for SSL certificates"
    },
    "caddy_config": {
      "description": "Caddy configuration storage"
    }
  },
  "networks": {
    "zipt_network": {
      "driver": "bridge",
      "description": "Internal network for service communication"
    }
  },
  "features": [
    "URL Shortening",
    "Analytics Dashboard",
    "Custom Domains",
    "Workspace Management",
    "User Authentication",
    "QR Code Generation",
    "Bulk Operations",
    "API Access",
    "Real-time Analytics",
    "Geographic Analytics"
  ],
  "requirements": {
    "memory": "2GB",
    "cpu": "1 core",
    "storage": "10GB",
    "network": "Public internet access required"
  },
  "backup": {
    "databases": ["database"],
    "volumes": ["postgres_data", "caddy_data"],
    "schedule": "daily"
  },
  "monitoring": {
    "health_checks": true,
    "logs": true,
    "metrics": ["cpu", "memory", "disk", "network"]
  },
  "security": {
    "auto_ssl": true,
    "password_generation": true,
    "environment_isolation": true,
    "network_isolation": true
  },
  "coolify": {
    "auto_generate_passwords": ["DATABASE_PASSWORD", "JWT_SECRET_KEY"],
    "public_services": ["proxy"],
    "public_database": true,
    "auto_backup": true,
    "monitoring": true
  }
} 