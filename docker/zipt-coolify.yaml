services:
  # Backend service
  backend:
    build:
      context: ${GIT_REPOSITORY_ROOT_PATH}
      dockerfile: docker/Dockerfile.backend
    restart: always
    environment:
      - ENV=production
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - BASE_URL=${BASE_URL}
      - API_URL=${API_URL}
      - VERSION=${VERSION}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_started
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M

  # Frontend website
  website:
    build:
      context: ${GIT_REPOSITORY_ROOT_PATH}/website
      dockerfile: ${GIT_REPOSITORY_ROOT_PATH}/docker/Dockerfile.website
    restart: always
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
      - NEXT_PUBLIC_BASE_URL=${BASE_URL}
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

  # Nginx for reverse proxy with HTTPS
  nginx:
    image: nginx:alpine
    restart: always
    ports:
      - "80:80"
    volumes:
      - ${GIT_REPOSITORY_ROOT_PATH}/docker/nginx/nginx.coolify.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      - website
      - backend
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
    environment:
      - COOLIFY_DOMAIN=${COOLIFY_DOMAIN}

  # Database
  postgres:
    image: postgres:15-alpine
    restart: always
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Cache
  redis:
    image: redis:7-alpine
    restart: always
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M

volumes:
  postgres-data:
  redis-data: 