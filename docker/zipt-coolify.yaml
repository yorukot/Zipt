version: '3.8'

networks:
  zipt-network:
    driver: bridge

services:
  # Backend service
  backend:
    build:
      context: .
      dockerfile: docker/Dockerfile.backend
    restart: always
    networks:
      - zipt-network
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      - ENV=production
      - DB_HOST=postgres
      - DB_USER=${DB_USER}
      - DB_PASSWORD=${DB_PASSWORD}
      - DB_NAME=${DB_NAME}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - REDIS_PASSWORD=${REDIS_PASSWORD}
      - JWT_SECRET=${JWT_SECRET}
      - BASE_URL=${BASE_URL}
      - API_URL=${API_URL}
      - VERSION=${VERSION}
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 512M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Frontend website
  website:
    build:
      context: ./website
      dockerfile: ../docker/Dockerfile.website
    restart: always
    networks:
      - zipt-network
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
      start_period: 10s
    environment:
      - NODE_ENV=production
      - NEXT_PUBLIC_API_URL=${API_URL}
      - NEXT_PUBLIC_BASE_URL=${BASE_URL}
    depends_on:
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Nginx for reverse proxy with HTTPS
  nginx:
    image: nginx:alpine
    restart: always
    networks:
      - zipt-network
    ports:
      - "80:80"
    volumes:
      - ./docker/nginx/nginx.coolify.conf:/etc/nginx/conf.d/default.conf:ro
    depends_on:
      website:
        condition: service_healthy
      backend:
        condition: service_healthy
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 128M
    environment:
      - COOLIFY_DOMAIN=${COOLIFY_DOMAIN}
    healthcheck:
      test: ["CMD", "ping", "-c", "1", "127.0.0.1"]
      interval: 10s
      timeout: 5s
      retries: 3
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Database
  postgres:
    image: postgres:15-alpine
    restart: always
    networks:
      - zipt-network
    environment:
      - POSTGRES_USER=${DB_USER}
      - POSTGRES_PASSWORD=${DB_PASSWORD}
      - POSTGRES_DB=${DB_NAME}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - type: bind
        source: ./docker/postgres/init-scripts/
        target: /docker-entrypoint-initdb.d/
        read_only: true
    deploy:
      resources:
        limits:
          cpus: "1"
          memory: 1G
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER}"]
      interval: 5s
      timeout: 5s
      retries: 10
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Cache
  redis:
    image: redis:7-alpine
    restart: always
    networks:
      - zipt-network
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    deploy:
      resources:
        limits:
          cpus: "0.5"
          memory: 256M
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 5s
      timeout: 5s
      retries: 10
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres-data:
    name: zipt-postgres-data
  redis-data:
    name: zipt-redis-data 